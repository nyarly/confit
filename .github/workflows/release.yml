# cf: https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: release
on:
  push:
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:
    inputs:
      version:
        description: Release version
        default: ""
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    # env:
      # Set to force version number, e.g., when no tag exists.
      # RELEASE_VERSION: TEST-0.0.0
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: ${{ env.RELEASE_VERSION }}
    steps:
      - name: Get release from event input
        shell: bash
        if: github.event.inputs.version != ''
        run: |
          echo "RELEASE_VERSION=${{github.event.inputs.version}}" >> $GITHUB_ENV
      - name: Get the release version from the tag
        shell: bash
        if: env.RELEASE_VERSION == '' && env.GITHUB_REF != 'ref/heads/main'
        run: |
          # cf: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Report release name
        shell: bash
        run: |
          echo "version is: ${{ env.RELEASE_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ubuntu-18.04
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      # Build static releases with PCRE2.
      PCRE2_SYS_STATIC: 1
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: linux
          rust: nightly
          target: x86_64-unknown-linux-musl
          ext:
        - build: linux-arm
          rust: nightly
          target: arm-unknown-linux-gnueabihf
          ext:
        - build: macos
          rust: nightly
          target: x86_64-apple-darwin
          ext:
        - build: win-msvc
          rust: nightly
          target: x86_64-pc-windows-msvc
          ext: .ext
        - build: win-gnu
          rust: nightly-x86_64-gnu
          target: x86_64-pc-windows-gnu
          ext: .ext
        - build: win32-msvc
          rust: nightly
          target: i686-pc-windows-msvc
          ext: .ext

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - uses: cachix/install-nix-action@v13
      with:
        nix_path: nixpkgs=channel:nixos-21.05

    - uses: cachix/cachix-action@v10
      with:
        name: nyarly-confit
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        extraPullNames: nix-community

    - name: Use Cross
      shell: bash
      run: |
        pwd
        ls -l
        nix-shell --run "cargo install cross"
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      run: |
        nix-shell --run "${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}"

    - name: Build archive
      shell: bash
      run: |
        staging="confit-${{ needs.create-release.outputs.version }}-${{ matrix.target }}"
        mkdir -p "$staging"

        cp {README.md,LICENSE.md} "$staging/"

        ls -R target
        cp "target/${{ matrix.target }}/release/confit${{ matrix.ext }}" "$staging/"
        tar czf "$staging.tar.gz" "$staging"
        echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
